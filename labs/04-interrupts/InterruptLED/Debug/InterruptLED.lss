
InterruptLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009de  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fd  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000363  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001dbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8e:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  ae:	fc 01       	movw	r30, r24
  b0:	40 81       	ld	r20, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_high+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_high+0xa>
  c0:	24 2b       	or	r18, r20
  c2:	20 83       	st	Z, r18
  c4:	08 95       	ret

000000c6 <GPIO_toggle>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  c6:	fc 01       	movw	r30, r24
  c8:	40 81       	ld	r20, Z
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <GPIO_toggle+0xe>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <GPIO_toggle+0xa>
  d8:	24 27       	eor	r18, r20
  da:	20 83       	st	Z, r18
  dc:	08 95       	ret

000000de <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	84 e2       	ldi	r24, 0x24	; 36
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
  e8:	65 e0       	ldi	r22, 0x05	; 5
  ea:	85 e2       	ldi	r24, 0x25	; 37
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_high>
    
    GPIO_config_output(&DDRB, LED_D2);
  f2:	64 e0       	ldi	r22, 0x04	; 4
  f4:	84 e2       	ldi	r24, 0x24	; 36
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D2);
  fc:	64 e0       	ldi	r22, 0x04	; 4
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_high>
    
    GPIO_config_output(&DDRB, LED_D3);
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	84 e2       	ldi	r24, 0x24	; 36
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D3);
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	85 e2       	ldi	r24, 0x25	; 37
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_high>
    
    GPIO_config_output(&DDRB, LED_D4);
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	84 e2       	ldi	r24, 0x24	; 36
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D4);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	85 e2       	ldi	r24, 0x25	; 37
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_high>


    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	80 83       	st	Z, r24
 138:	80 81       	ld	r24, Z
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 13e:	ef e6       	ldi	r30, 0x6F	; 111
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 148:	78 94       	sei
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x6c>

0000014c <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{   
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
    i++;        
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 172:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    GPIO_toggle(&PORTB, i);
 180:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 184:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_toggle>
    if (i == 7)
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 198:	07 97       	sbiw	r24, 0x07	; 7
 19a:	31 f4       	brne	.+12     	; 0x1a8 <__vector_13+0x5c>
    {
      i = 2;        
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    }

 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
