
5-Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dcc  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fe  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fa  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 **********************************************************************/
int main(void)
{

    // Configure SSD signals
    SEG_init();
  f0:	0e 94 14 01 	call	0x228	; 0x228 <SEG_init>

    // Test of SSD: display number '3' at position 0

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	83 60       	ori	r24, 0x03	; 3
 102:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
	
	TIM0_overflow_4096us();
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	85 bd       	out	0x25, r24	; 37
 114:	85 b5       	in	r24, 0x25	; 37
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x36>

00000128 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{ 
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	if (j == 5 && i ==59)
 13a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <j>
 13e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <j+0x1>
 142:	85 30       	cpi	r24, 0x05	; 5
 144:	91 05       	cpc	r25, r1
 146:	81 f4       	brne	.+32     	; 0x168 <__vector_13+0x40>
 148:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <i>
 14c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <i+0x1>
 150:	2b 33       	cpi	r18, 0x3B	; 59
 152:	31 05       	cpc	r19, r1
 154:	49 f4       	brne	.+18     	; 0x168 <__vector_13+0x40>
	{
		i = 0;
 156:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i+0x1>
 15a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i>
		j = 0;
 15e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <j+0x1>
 162:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <j>
 166:	17 c0       	rjmp	.+46     	; 0x196 <__vector_13+0x6e>
	}
    else if (i<9)
 168:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <i>
 16c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <i+0x1>
 170:	29 30       	cpi	r18, 0x09	; 9
 172:	31 05       	cpc	r19, r1
 174:	3c f4       	brge	.+14     	; 0x184 <__vector_13+0x5c>
    {
        i++;
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <i+0x1>
 17e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <i>
 182:	09 c0       	rjmp	.+18     	; 0x196 <__vector_13+0x6e>
    }
    else
    {    
     i = 0;
 184:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i+0x1>
 188:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i>
	 j++;   
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <j+0x1>
 192:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <j>
    }
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	if (k == 0)
 1ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 1d2:	89 2b       	or	r24, r25
 1d4:	79 f4       	brne	.+30     	; 0x1f4 <__vector_16+0x4c>
	{
	SEG_update_shift_regs(i,0);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 1dc:	0e 94 24 01 	call	0x248	; 0x248 <SEG_update_shift_regs>
	k++;
 1e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1e4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 1ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <__vector_16+0x5e>
	}
	else
	{
	SEG_update_shift_regs(j,1);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <j>
 1fa:	0e 94 24 01 	call	0x248	; 0x248 <SEG_update_shift_regs>
	k = 0;
 1fe:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 202:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}

 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	8a e2       	ldi	r24, 0x2A	; 42
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 232:	67 e0       	ldi	r22, 0x07	; 7
 234:	8a e2       	ldi	r24, 0x2A	; 42
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	84 e2       	ldi	r24, 0x24	; 36
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 246:	08 95       	ret

00000248 <SEG_update_shift_regs>:
    0b10000000
};

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 24e:	e8 2f       	mov	r30, r24
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 5f       	subi	r30, 0xFC	; 252
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 258:	e6 2f       	mov	r30, r22
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	e0 50       	subi	r30, 0x00	; 0
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    
    GPIO_write_low(&PORTD, SEG_LATCH);
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	8b e2       	ldi	r24, 0x2B	; 43
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	8b e2       	ldi	r24, 0x2B	; 43
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	85 e2       	ldi	r24, 0x25	; 37
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	8a 95       	dec	r24
 284:	f1 f7       	brne	.-4      	; 0x282 <SEG_update_shift_regs+0x3a>
 286:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	21 c0       	rjmp	.+66     	; 0x2ce <SEG_update_shift_regs+0x86>
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 0b00000001) == 0)
 28c:	10 fd       	sbrc	r17, 0
 28e:	06 c0       	rjmp	.+12     	; 0x29c <SEG_update_shift_regs+0x54>
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	85 e2       	ldi	r24, 0x25	; 37
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <SEG_update_shift_regs+0x5e>
        }
        else
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	85 e2       	ldi	r24, 0x25	; 37
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <SEG_update_shift_regs+0x60>
 2ac:	00 00       	nop
        }
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 2ae:	67 e0       	ldi	r22, 0x07	; 7
 2b0:	8b e2       	ldi	r24, 0x2B	; 43
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <SEG_update_shift_regs+0x72>
 2be:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);    
 2c0:	67 e0       	ldi	r22, 0x07	; 7
 2c2:	8b e2       	ldi	r24, 0x2B	; 43
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 2ca:	16 95       	lsr	r17
    GPIO_write_low(&PORTB, SEG_DATA);
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2cc:	cf 5f       	subi	r28, 0xFF	; 255
 2ce:	c8 30       	cpi	r28, 0x08	; 8
 2d0:	e8 f2       	brcs	.-70     	; 0x28c <SEG_update_shift_regs+0x44>
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	21 c0       	rjmp	.+66     	; 0x318 <SEG_update_shift_regs+0xd0>
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((position & 0b00000001) == 0)
 2d6:	d0 fd       	sbrc	r29, 0
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <SEG_update_shift_regs+0x9e>
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	85 e2       	ldi	r24, 0x25	; 37
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <SEG_update_shift_regs+0xa8>
        }
        else
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	85 e2       	ldi	r24, 0x25	; 37
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	8a 95       	dec	r24
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <SEG_update_shift_regs+0xaa>
 2f6:	00 00       	nop
        }
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 2f8:	67 e0       	ldi	r22, 0x07	; 7
 2fa:	8b e2       	ldi	r24, 0x2B	; 43
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <SEG_update_shift_regs+0xbc>
 308:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 30a:	67 e0       	ldi	r22, 0x07	; 7
 30c:	8b e2       	ldi	r24, 0x2B	; 43
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 314:	d6 95       	lsr	r29
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 316:	cf 5f       	subi	r28, 0xFF	; 255
 318:	c8 30       	cpi	r28, 0x08	; 8
 31a:	e8 f2       	brcs	.-70     	; 0x2d6 <SEG_update_shift_regs+0x8e>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 31c:	64 e0       	ldi	r22, 0x04	; 4
 31e:	8b e2       	ldi	r24, 0x2B	; 43
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <SEG_update_shift_regs+0xe0>
 32c:	00 00       	nop
    // Wait 1 us
    _delay_us(1);

}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
